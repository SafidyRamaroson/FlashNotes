// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart   Cart?
  orders Order[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]
}

model Product {
  id               Int      @id @default(autoincrement())
  name             String   @unique
  description      String
  price            Float
  image            String?
  stock            Int      @default(0)
  minimumThreshold Int
  categoryId       Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  category   Category?   @relation(fields: [categoryId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int      @default(1)
  productId Int
  cartId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  cart    Cart    @relation(fields: [cartId], references: [id])
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]
}

enum OrderStatus {
  PENDING // Commande en attente
  PROCESSING // En cours de traitement
  SHIPPED // Expédiée
  DELIVERED // Livrée
  CANCELED // Annulée
  RETURNED // Retournée
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float
  productId Int
  orderId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
}
