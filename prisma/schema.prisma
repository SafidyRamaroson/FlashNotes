// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  name             String
  hashPassword     String?
  isEmailVerified  Boolean          @default(false)
  otp              Int?
  expiredOtpAt     DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  sharedNoteGroups ShareNoteGroup[]
  notesGroup       NoteGroup[]
  review           Review[]
  tags             Tag[]
}

model Note {
  id           String     @id @default(uuid())
  term         String     @unique
  definition   String
  image        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  noteGroupId  String
  noteGroup    NoteGroup  @relation(fields: [noteGroupId], references: [id], onDelete: Cascade)
  noteTags     NoteTag[]
  noteReviewId String
  noteReview   NoteReview @relation(fields: [noteReviewId], references: [id], onDelete: Cascade)
}

model NoteGroup {
  id             String           @id @default(uuid())
  name           String
  favorite       Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  notes          Note[]
  shareNoteGroup ShareNoteGroup[]
}

model ShareNoteGroup {
  id               String    @id @default(uuid())
  groupNoteId      String
  sharedWithUserId String
  noteGroup        NoteGroup @relation(fields: [groupNoteId], references: [id])
  sharedWithUser   User      @relation(fields: [sharedWithUserId], references: [id])
  createdAt        DateTime  @default(now())
}

model Tag {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  notes     NoteTag[]
}

model NoteTag {
  id        Int      @id @default(autoincrement())
  noteId    String
  tagId     String
  note      Note     @relation(fields: [noteId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model NoteReview {
  id        String       @id @default(uuid())
  status    ReviewStatus @default(NOT_DONE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  notes     Note[]
  reviews   Review[]
}

model Review {
  id           String     @id @default(uuid())
  noteReviewId String
  userId       String
  createdAt     DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  noteReview   NoteReview @relation(fields: [noteReviewId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

enum ReviewStatus {
  NOT_DONE
  COMPLETED
}
